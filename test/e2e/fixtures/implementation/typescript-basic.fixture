/// src/index.ts
import { login } from './authenticate';
import { getUserName } from './model/User';

const emailInput = document.getElementById('email');
const passwordInput = document.getElementById('password');
const loginForm = document.getElementById('login');

if (!emailInput) {
  throw new Error("Cannot find #email input.");
}
if (!passwordInput) {
  throw new Error("Cannot find #password input.");
}
if (!loginForm) {
  throw new Error("Cannot find #login form.");
}

let email = '';
let password = '';

emailInput.addEventListener('change', event => {
  if (event.target instanceof HTMLInputElement) {
    email = event.target.value;
  }
});
passwordInput.addEventListener('change', event => {
  if (event.target instanceof HTMLInputElement) {
    password = event.target.value;
  }
});
loginForm.addEventListener('submit', async event => {
  const user = await login(email, password);

  if (user.role === 'admin') {
    console.log(`Logged in as ${getUserName(user)} [admin].`);
  } else {
    console.log(`Logged in as ${getUserName(user)}`);
  }
});

/// src/authenticate.ts
import { User } from './model/User';

async function login(email: string, password: string): Promise<User> {
  const response = await fetch(
    '/login',
    {
      method: 'POST',
      body: JSON.stringify({ email, password })
    }
  );
  return response.json();
}

async function logout(): Promise<any> {
  const response = await fetch(
    '/logout',
    {
      method: 'POST'
    }
  );
  return response.json();
}

export { login, logout };

/// src/model/User.ts
import { Role } from './Role';

type User = {
  id: string;
  email: string;
  role: Role;
  firstName?: string;
  lastName?: string;
}

function getUserName(user: User): string {
  return [user.firstName, user.lastName]
    .filter(name => name !== undefined)
    .join(' ');
}

export { User, getUserName };

/// src/model/Role.ts
type Role = "admin" | "client" | "provider";

export { Role };
